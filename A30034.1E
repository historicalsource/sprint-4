	.TITLE SPR4 
	.SBTTL BASE PAGE DATA
;
;ZPAGE ENTRY DEFINITIONS
;
	.GLOBL	VEL,DIRECT,HPOSL,VPOSL,HPOS
	.GLOBL	SOUND,VPOS,ROTATE,HPOST,VPOST
	.GLOBL	TEMP1,TEMP2,TEMP3,TEMP4
	.GLOBL	TEMP5,AUDY,FRAME,INTTMP,GSTAT
	.GLOBL	TRKN,CTIME
	.GLOBL	TCOUNT,TSAVE,CNTDWN
	.GLOBL	GEAR,COIN
	.GLOBL	THIST,TIMER,TIM,STAT
	.GLOBL	RTEST1,RTEST2,SCORED,CREDIT
	.GLOBL	TSEL,SKIDON,GP,SKIDOFF,CROUT,AMODE
	.GLOBL  SBLON,SBLOFF,SBUTON,OLDCRED
	.ASECT
	.=200
VEL:	.BLKB	8.
DIRECT	=VEL+1
HPOSL:	.BLKB	8.		;4 BYTE INTERSPERSED TABLES
VPOSL	=HPOSL+1
HPOS:	.BLKB	8.		;HORIZONTAL POSITION
SOUND	=HPOS+1			;MOTOR RPM FREQUENCY
VPOS:	.BLKB	8.		;VERTICAL POSITION
ROTATE	=VPOS+1			;CARS ROTATION
STAT:	.BLKB	8.		;STATUS BYTE FOR EACH CAR
TIM	=STAT+1
HPOST:	.BLKB	8.
VPOST	=HPOST+1
AUDY:	.BLKB	8.		;AUTO PILOT WORD
GEAR	=AUDY+1
FRAME:	.BLKB	1			;FRAME COUNTER
TRKN:	.BLKB	1		;TRACK NUMBER
INTTMP:	.BLKB	1			;INTERRUPT TEMP CELL
GSTAT:	.BLKB	1		;GAME STATUS D7=1=IN PROGRESS, D6=1=CREDIT ACCRUED
TEMP1:	.BLKB	2
TEMP2:	.BLKB	2
TEMP3:	.BLKB	2
TEMP4:	.BLKB	2
TEMP5:	.BLKB	2
CNTDWN:	.BLKB	1		;10 SECOND COUNTDOWN TIMER.
CTIME:	.BLKB	8.		;COLLISION TIMER
COIN	=CTIME+1		;COIN TIMES
CRASH:	.BLKB	1
TCOUNT:	.BLKB	1
TSAVE:	.BLKB	1
THIST:	.BLKB	1
TIMER:	.BLKB	1		;GAME TIMER
LEADER:	.BLKB	1		;POINTER TO HIGH SCORE
SCORED:	.BLKB	8.
CREDIT:	.BLKB	1
OLDCRED:	.BLKB	1
RTEST1:	.BLKB	1
RTEST2:	.BLKB	1
	.RADIX 16
OPTSW2	=61			;D0=COINS/PLAY(SW3) D1=LOCKOUT DURING GAME(SW4)
				;SWITCHES 5 AND 6
OPTSW3	=60			;LANGUAGE SELECTOR(SW5,SW6) SWITCH 7 AND 8
GTIME1	=63			;GAME TIME, SW1=60 SEC SW2=90 SEC
GTIME2	=62			;GAME TIME, SW3=120 SEC SW4=150 SEC
CROUT	=42
PF	=^H800			;RAM ADDRESS OF PLAYFIELD
GP	=40
SST	=1000			;SELF TEST(D6) LOW TRUE
TSEL	=1800			;TRACK SELECT(D7) LOW TRUE
VBLANK	=1000
TREST	=44
AMODE	=0
SKIDOFF	=68			;SKID OFF I/O ADDRESS
SKIDON	=69			;SKID I/O ADDRESS
PCOL	=41			;PLAYFIELD COLLISION ADDRESS
POFF	=20			;PF COLLISION RESET
TRF1	=^H1C			;TRA
TRF2	=^H1D			;AF
TRF3	=^H1E			;F1C
	.RADIX 8
STARTM	=0			;MESSAGE NUMBERS
COIN1	=2
COIN2	=4
DIAGM	=6
CREDMES	=10
	.PAGE
;ENTRY POINTS
	.GLOBL	MAINT,SCROUT,TRAN1,MESS,VPOSTAB
	.GLOBL	SCADD1,ROTEN1
;EXTERNAL REFERENCES
	.GLOBL	CARCOL,PWRON,NMIINT
	.GLOBL	RSTALL,TPTRS,CHKPTS,STEST
	.GLOBL	QNOTRK,QCOMCH
	.CSECT
	.SBTTL	MAINLP
MAINT:
MAIN:	JSR	A,ATRACT		;GO TO ATTRACT MODE
	JSR	A,START			;START GAME
	JMP	A,MAIN
	.PAGE
;ATTRACT SUBROUTINE
ATRACT:	LDA	I,0
	STA	Z,FRAME		;RESET FRAME COUNTER
	STA	Z,AMODE		;TURN OFF SOUND
	STA	Z,OLDCRED
	LDA	I,10
	STA	Z,CNTDWN
	BIT	A,SST			;TEST MODE?
	BVC	A8			;BRANCH IF YES
	JSR	A,TRACK			;OUTPUT INITIAL TRACK
AAA:	JSR	A,INITIL		;SET UP CARS
	JSR	A,COINOUT
	INC	Z,FRAME
A3:	LDA	Z,FRAME
	BNE	A5
	JSR	UPTRK			;BUMP THE TRACK NUMBER
	JMP	A,AAA
A5:	BIT	A,SST			;SIMPLE SELF-TEST?
	BVS	A9
A8:	JMP	A,STEST			;YES, GO TO SLT
A9:	LDX	I,6			;CAR #
20$:	LDA	I,360
	AND	ZX,SOUND		;LEAVE DRONE BIT ON
	STA	ZX,SOUND
	STA	ZX,SKIDOFF
	JSR	SCROUT			;OUTPUT LAST SCORE TO P.F.
	DEX
	DEX
	BPL	20$
	LDA	I,0
	STA	Z,CRASH
	STA	Z,AMODE
	STA	Z,CROUT			;TURN OFF CRASHES
A2:	BIT	A,VBLANK		;WAIT FOR V BLANK
	BPL	A2
5$:	BIT	A,VBLANK
	BMI	5$
	STA	Z,TREST
	JSR	TRANS
	INC	Z,FRAME
	BIT	Z,GSTAT
	BMI	7$			;GAME STARTED
	BVS	40$			;CREDIT ACCRUED
	BVC	A3			;NO GAME, NO CREDIT
7$:	LDA	Z,FRAME			;1 SECOND INTERVALS
	AND	I,77
	BNE	40$			;NOT YET
	LDA	Z,CNTDWN		;GET TIMER VALUE
	CMP	I,8.
	BNE	10$			;NOT FIRST TIME
	JSR	RSTALL			;RESET ALL CARS
10$:
	DEC	Z,CNTDWN		;DECR THE COUNTER
	JSR	CNTMES
	LDA	Z,CNTDWN
	BNE	40$
30$:	JMP	A,TRACK			;PUT UP THE TRACK AGAIN, RETURN
40$:	JSR	TBONE			;SELECT A TRACK
	BCC	RHU			;C=0 IF NO TRACK CHANGE
	JSR	COINOUT			;OUTPUT ONLY IF TRK CHANGED
	BIT	Z,GSTAT		;IF D7=1 THEN GAME IN PROGRESS
	BPL	RHU		;SKIP COUNTDOWN IF NO GAME IN PROGRESS
	JSR	CNTMES
RHU:	JSR	CREDOUT			;OUTPUT ALWAYS
	JMP	A5
	.PAGE
;
;START PLAY SUBROUTINE
;
START:
	JSR	A,INITIL		;SET-UP CARS
	LDA	I,1
	STA	Z,AMODE			;TURN ON SOUND
PLAY:	JSR	A,TRANS
	INC	Z,FRAME			;INCREMENT FRAME COUNT
;
;CHECK CAR COLLISIONS
;
	JSR	CARCOL
;
;HANDLE EACH CAR NOW
;
	LDX	I,6
S1000:	JSR	A,CNTRL			;COMPUTER-CONTROL CARS
;
;USER CARS
;
;   PLAYFIELD COLLISION
;
	STA	ZX,SKIDOFF		;TURN OFF SKID SOUND
	LDA	ZX,PCOL			;PLAYFIELD HIT?
	BMI	S61			;YES
	LDA	ZX,TIM			;DISABLE WALL HIT LOGIC
	BEQ	S60			;FOR 16 FRAMES
	DEC	ZX,TIM
	JMP	A,S70
S60:	LDA	ZX,PCOL			;PLAYFIELD HIT?
	BMI	S61
	LDA	I,0			;NO, CLEAR FLAGS
	STA	ZX,TIM
	LDA	I,367
	AND	ZX,STAT			;CLEAR FIRST HIT FLAG
	STA	ZX,STAT
	JMP	A,S70
S61:	STA	ZX,POFF			;TURN OFF COLLISIONS
	LDY	I,0
	STY	ZX,CTIME		;CLEAR CAR COLLISION FLAG
	LDA	ZX,STAT
	AND	I,10
	BNE	S62			;NO
	LDA	I,1			;YES, SET VEL=1
	STA	ZX,VEL
	LDA	I,10
	ORA	ZX,STAT			;DISABLE NEXT HITS
	STA	ZX,STAT
	LDA	I,17			;SET UP CRASH NOISE
	STA	Z,CRASH
S62:	LDA	I,20
	STA	ZX,TIM
S70:	LDY	Z,CRASH			;CRASH STILL ACTIVE?
	BEQ	10$			;NO
	TXA
	BNE	S80			;NOT CAR ZERO
	LDA	Z,FRAME			;YES, 4TH FRAME?
	AND	I,3
	BNE	S80			;NOT 4TH YET
	DEC	Z,CRASH			;YES, CONTINUE CRASH
10$:	STY	Z,CROUT			;OUTPUT CRASH NOISE
S80:	LDA	ZX,CTIME		;CAR HIT STILL ACTIVE?
	BEQ	S81			;NO
	STA	ZX,SKIDON		;TURN SKID SOUND ON
	DEC	ZX,CTIME		;DOWN TIMER
	LDY	I,2
	LDA	ZX,STAT
	BMI	20$			;NOT A DRONE
	LDY	I,2			;DEFLECT DRONE
	BNE	S800
20$:	AND	I,20			;TEST IF CW TURN
	BNE	S800
	LDY	I,376
S800:	TYA
	CLC
	ADC	ZX,ROTATE
	STA	ZX,ROTATE
S81:
;
;ACCELERATION
;
	LDA	ZX,STAT			;NOT IF A DRONE
	BPL	S130
	LDA	Z,FRAME
	AND	I,3
	BNE	S130
	JSR	A,GETAC			;GET ACCELERATION
	CMP	I,371			;ACCELERATION.LE.SKID VALUE
	BPL	S10			;NO
	STA	ZX,SKIDON		;YES,TURN ON SKID
S10:	CMP	I,0			;TEST SIGH OF ACCELERATION
	CLC
	BMI	10$			;SLOWING DORNE
	ADC	ZX,VEL			;SPEED UP
	BNE	15$
	LDA	ZX,VEL
	BEQ	15$			;NOT MOVING
	LDA 	I,377			;OVERBLOW-RESET TO TO SPEED
	BNE	15$
10$:	ADC	ZX,VEL			;SLOW DOWN
	BNE 	15$
	LDA	I,1			;MINIMUN SPEED
15$:	STA	ZX,VEL
;
;ENGINE RPM SOUND
;
S130:	LDA	ZX,VEL
	LSR				;GET RPM SOUND
	LSR
	LSR
	STA	Z,TEMP1
	LDA	ZX,GEAR			;GET GEAR # IN A
	LDY	ZX,STAT
	BMI	10$
	LDA	ZX,ROTATE		;GET DRONES ROTATION
	LSR
	LSR				;HIGH 3 BITS OF ROTATE
	LSR
	LSR
	LSR
	ORA	I,8.+128.		;USE THIS AS RPM
	JMP	S104
10$:
	TAY
	ASL
	STA	Z,TEMP2
	LDA	AY,RATIO
	TAY
	LDA	I,0
S101:	CLC
	ADC	Z,TEMP1
	DEY
	BNE	S101
	LSR
	LSR
	LSR
	SEC
	SBC	Z,TEMP2
	BPL	S102
	LDA	I,0
S102:	CMP	I,20
	BMI	S104
	LDA	I,17
S104:
	STA	ZX,SOUND		;SET MOTOR RPM
;
;DIRECTION UPDATE
;
	LDA	I,4			;IF GOING SLOW CATCH UP FAST
	LDY	ZX,VEL			;TEST HIGH BIT OF VEL
	BPL	10$
	LDA	I,3			;IF GOING FAST,CATCHUP SLOWLY
10$:
	STA	Z,TEMP1			;CONSTANT =  3 OR 4 DEPENDING ON VEL
	LDA	ZX,ROTATE
	AND	I,370
	STA	Z,TEMP2
	LDA	ZX,DIRECT
	AND	I,370
	SEC
	SBC	Z,TEMP2
	BEQ	S20
	BMI	S211
	CMP	I,20
	BMI	S2110
	STA	ZX,SKIDON		;TURN ON SKID
S2110:	LDA	I,0
	SEC
	SBC	Z,TEMP1
	STA	Z,TEMP1			;CONSTANT=-CONSTANT
	JMP	A,S21
S211:	CMP	I,370
	BPL	S21
	STA	ZX,SKIDON		;TURN ON SKID
S21:	LDA	Z,TEMP1
	CLC
	ADC	ZX,DIRECT
	STA	ZX,DIRECT		;UPDATE DIRECTION
;
;UPDATE POSITION
;
S20:	JSR	A,UPDATE		;UPDATE USER CAR POSITION
;
;CHECKPOINTS & SCORE
;
	JSR	A,SCORE
;
;FINISHED?
;
;
;TIMER
;
	CPX	I,0
	BNE	S252
	DEC	Z,TCOUNT		;TIME TO UPDATE TIME COUNT?
	BNE	S252			;NO
	DEC	Z,TIMER			;SECOND TIMES
	BEQ	S2501
	LDA	Z,TSAVE
	STA	Z,TCOUNT
S252:
	DEX
	DEX
	BMI	S501			;DONE?
	JMP	S1000			;NO
S501:	BIT	A,VBLANK		;WAIT FOR V RESET
	BMI	S501
	STA	Z,TREST			;PULSE WATCHDOG
	JMP	A,PLAY
S2501:	LDA	I,0			;TURN OFF SOUND
	STA	Z,AMODE
	STA	Z,GSTAT			;STOP THE GAME
	STA	Z,TEMP2
	LDA	Z,CREDIT
	LSR				;TEST WHOLE CREDITS
	BEQ	1$
	LDA	I,100
	STA	Z,GSTAT			;SET GSTAT FOR CREDIT
1$:	LDA	I,2
	STA	Z,TEMP2+1
	LDX	I,6
2$:	LDA	ZX,STAT			;RESET PLAYER BITS
	AND	I,3			;LEAVE COIN BITS
	STA	ZX,STAT
	DEX
	DEX
	BPL	2$
3$:	LDX	I,6
5$:	LDA	I,360
	STA	ZX,SKIDOFF		;TURN OFF SKID SOUNDS
	AND	ZX,SOUND		;PRESERVE DRONE BIT
	STA	ZX,SOUND
	STA	AX,SBLOFF
	JSR	TRAN1			;OUTPUT THE CARS
	JSR	SCROUT			;PUT UP THE SCORE
	DEX
	DEX
	BPL	5$
	LDA	I,0
	STA	Z,CROUT			;TURN OFF CRASH
	STA	Z,TREST
;
;FREEZE SCREEN FOR 10 SECONDS
;
10$:	BIT	A,VBLANK
	BMI	10$
20$:	BIT	A,VBLANK		;WAIT FOR VBLANK TO COME THEN GO
	BPL	20$
	INC	Z,FRAME
	LDA	Z,GSTAT			;TEST IF A GAME IS STABLE
	BPL	30$
	RTS				;YES, GO COUNT DOWN
30$:
	DEC	Z,TEMP2
	BNE	3$			;INNER LOOP 256 COUNTS
	DEC	Z,TEMP2+1
	BNE	3$			;OUTER LOOP - DO ONCE
	RTS				;GO START OVER
	.PAGE
	.SBTTL	MISC SUBROUTINES
;
;
;SUBROUTINES
;
;
CNTRL:	LDA	ZX,STAT		;TEST IF A DRONE
	BMI	A20
	LDA	ZX,CTIME
	BEQ	7$			;NOT CRASHING
	AND	I,3
	BNE	A6			;DON'T STEER
7$:	LDA	I,0
	STA	Z,TEMP1
	LDA	I,PF/256.
	STA	Z,TEMP1+1
	LDA	ZX,HPOST
	CLC
	ADC	I,-8.			;ADD -8 TO GET CENTER OF CAR
	LSR
	LSR
	LSR				;DIVIDE BY 8
	CLC
	ADC	Z,TEMP1
	STA	Z,TEMP1
	LDA	I,0
	STA	Z,TEMP2
	ADC	Z,TEMP1+1
	STA	Z,TEMP1+1
	LDA	ZX,VPOST
	CLC
	ADC	I,-5			;ADD -5 TO GET CENTER OF CAR
	AND	I,370
	ASL
	ROL	Z,TEMP2			;SAVE CARRY
	ASL
	ROL	Z,TEMP2			;SAVE 2 MSB'S
	CLC
	ADC	Z,TEMP1
	STA	Z,TEMP1
	LDA	Z,TEMP2
	ADC	Z,TEMP1+1
	STA	Z,TEMP1+1
	LDA	ZX,ROTATE
	AND	I,370			;SAME POSITION
	STA	Z,TEMP3
	LDY	I,0
	LDA	NY,TEMP1		;GET SQUARE FROM PLAYFIELD
	LSR				;TEST LOW BIT
	BCS	10$			;BRANCH IF ON
	AND	I,157			;CLEAR R0 BIT
10$:	ASL
	AND	I,340			;MASK TO ROTATION
	SEC
	SBC	Z,TEMP3			;SUBTRACT ROTATION
	AND	I,370
	BEQ	A6			;NO CHANGE IF EQUAL
	LSR
	LSR				;DIVIDE BY 16
	LSR
	LSR
	CLC
	BIT	A,H8			;TEST IF NEGATIVE
	BEQ	20$
	ORA	I,360			;EXTEND SIGN
	ADC	I,-2			;MINUS A CONSTANT
	JMP	30$
20$:	ADC	I,2			;PLUS A CONSTANT
30$:
	CLC
	ADC	ZX,ROTATE
	STA	ZX,ROTATE
A6:	LDA	ZX,VEL
	CLC
	ADC	I,01			;VEL=VEL+ACCELERATION
	CMP	AX,MAXVEL
	BCC	A10
	LDA	AX,MAXVEL
A10:	STA	ZX,VEL
A20:	RTS
;
;UPDATE THE CAR POSITION
;
UPDATE:	STX	Z,TEMP1			;SAVE CAR INDEX
	LDA	ZX,VEL
	BEQ	U3
	LSR
	LSR
	LSR
	STA	Z,TEMP2			;MULTIPLICAND (VEL)
	LDA	ZX,DIRECT
	LSR
	LSR
	LSR
	TAX
	STX	Z,TEMP3			;SAVE INDEX FOR LATER
	LDA 	AX,HOFF
	BEQ	U2
	TAX				;MULTIPLIER (HOFF)
	JSR	A,MULT			;GET VEL*HOFF
	LDX	Z,TEMP1
	LDA	Z,TEMP4
	CLC
	ADC	ZX,HPOSL
	STA	ZX,HPOSL
	LDA	Z,TEMP4+1		;UPDATE HORIZONTAL POSITION
	ADC	ZX,HPOST
;
;TEST HORIZONTAL BOUNDARIES FOR ON-SCREEN
;
	LDY	I,20
	CMP	I,20			;TEST H FOR LOW
	BCC	40$			;TOO LOW
	CMP	I,370			;TEST HIGH
	BCC	50$			;OK
	LDY	I,370			;RESET COORD.
40$:	TYA
50$:
	STA	ZX,HPOST
U2:	LDX	Z,TEMP3			;GET SAVED TABLE INDEX
	LDA	AX,VOFF
	BEQ	U3
	TAX				;MULTIPLIER (VOFF)
	JSR	A,MULT			;GET VEL*VOFF
	LDX	Z,TEMP1
	LDA	Z,TEMP4
	CLC
	ADC	ZX,VPOSL
	STA	ZX,VPOSL
	LDA	Z,TEMP4+1
	ADC	ZX,VPOST
;
;TEST VERTICAL ON-SCREEN BOUNDARIES
;
	LDY	I,22
	CMP	I,22			;TEST LOW
	BCC	60$			;TOO LOW
	CMP	I,337			;TEST HIGH
	BCC	70$			;OK
	LDY	I,336
60$:	TYA				;SET NEW VERTICAL POSITION
70$:
	STA	ZX,VPOST
U3:	LDX	Z,TEMP1			;RESTORE CAR NUMBER
	RTS
MULT:	STX	Z,TEMP2+1
	TXA
	BPL	M3
	EOR	I,377
	TAX
	INX				;NEGATES X
M3:	LDA	I,0
	STA	Z,TEMP4
	STA	Z,TEMP4+1
M2:	LDA	Z,TEMP4
	CLC
	ADC	Z,TEMP2
	STA	Z,TEMP4
	BCC	10$
	INC	Z,TEMP4+1		;CARRY
10$:
	DEX
	BNE	M2
	LDA	Z,TEMP2+1
	BPL	M1
	LDA	I,0
	SEC
	SBC	Z,TEMP4
	STA	Z,TEMP4
	LDA	I,0
	SBC	Z,TEMP4+1
	STA	Z,TEMP4+1
M1:	RTS
INITIL:	LDY	I,0			;TAKE LOWEST TIME SET
	LDA	Z,GTIME1		;READ SWITCHES 1 AND 2
	LSR
	ROR				;SAVE CARRY GET BIT 1
	BCC	10$			;GO IT 60 SECONDS
	INY
	ROL
	BCC	10$			;GOT IT 90 SECONDS
	INY
	LDA	Z,GTIME2		;READ SWITCHES 3 AND 4
	LSR
	LSR
	BCC	10$			;GOT IT 120 SECONDS
	INY				;150 SECONDS
10$:	LDA	AY,TUP
	STA	Z,TCOUNT
	STA	Z,TSAVE
	LDA	I,0			;INITIALIZE SOUND & FRAME COUNT
	STA	Z,THIST
	STA	Z,CRASH
	STA	Z,CROUT
	LDA	I,100.
	STA	Z,TIMER			;SET TIME=100
	STA	Z,POFF
	STA	Z,POFF+2		;TURN OFF COLLISIONS
	STA	Z,POFF+2+2
	STA	Z,POFF+2+2+2
	RTS
GETAC:	LDA	ZX,VEL
	LSR			;GET VEL /2
	LSR
	LSR
	LSR
	ASL
	TAY				;TABLE INDEX
	LDA	ZX,GEAR
	LSR
	LSR
	BCC	10$			;1ST AND 2ND
	INY				;3RD OR 4TH
10$:
	LDA	ZX,GP			;GAS PEDAL SET?
	BMI	G4
	LDA	AY,ACTAB		;GET THE ACCELERATION ENTRY
	BNE	G5
G4:	LDA	AY,DACTAB			;GET THE DECELERATION ENTRY
G5:	CLC
	LDY	ZX,GEAR
	STY	Z,TEMP1			;GAME GEAR
	LSR	Z,TEMP1			;WHICH NIBBLE
	BCS	G6			;LOWER NIBBLE
	LSR
	LSR
	LSR
	LSR
G6:	AND	I,17
	BIT	A,H8			;TEST IF A NEGATIVE NIBBLE
	BEQ	G8			;NO
	ORA	I,360			;YES, EXTEND SIGN
G8:	RTS
H8:	.BYTE	8.
;
;ROUTINES TO OUTPUT A MESSAGE TO THE PLAYFIELD
;	A = INDEX TO PLAYFIELD ADDRESS TABLE
;	X = OFFSET TO MESSAGE FROM MESSES
;	Y = INCREMENT BETWEEN STORES +-1 FOR ROW
;			             +-20 FOR COLUMNS
;
MESS:	STY	Z,TEMP4			;SAVE INCREMENT
	TAY				;PF ADDR INDEX
	LDA 	AY,MPOINT
	STA	Z,TEMP2			;GET PF ADDR
	LDA	AY,MPOINT+1
	STA	Z,TEMP2+1
	LDA	Z,OPTSW3		;GET LANGUAGE
	AND	I,3
	PHA				;SAVE VALUE FOR LATTER
	STX	Z,TEMP3			;SAVE PTR TO ONE OF 5 POSSIBLE MESSAGES
	ASL
	ASL
	ASL
	STA	Z,TEMP5			;ALL THIS MULTIPLIES OPTION
	PLA
	ASL				;BY 10 SINCE THERE ARE 5 MESSAGES
	CLC
	ADC	Z,TEMP5			;(2 BYTES EACH) FOR EACH OPTION
	CLC
	ADC	Z,TEMP3
	TAX				;SET MESSAGE PTR
					;X POINTS AT TABLE ENTRY
	LDA	AX,MESSPT
	STA	Z,TEMP3
	LDA	AX,MESSPT+1		;SET MESSAGE POINTER
	STA	Z,TEMP3+1
	LDY	I,0			;MESSAGE INDEX
10$:	LDA	NY,TEMP3		;GET NEXT OUTPUT CHARACTER
	BEQ	40$			;ZERO BYTE MEANS DONE
	LDX	Z,TEMP4			;TEST INCREMENT
	BPL	20$			;POSITIVE
	ORA	I,200			;ROTATE CHAR BY 180 DEGREES
20$:
	AND 	I,^H0BF
	LDX	I,0
	STA	NX,TEMP2		;PUT CHAR INTO FIELD
	LDA	Z,TEMP4			;GET INCR. AMOUNT
	CLC
	ADC	Z,TEMP2			;ADD TO PF POINTER
	STA	Z,TEMP2
	LDA	I,0
	BIT	Z,TEMP4			;TEST SIGN OF INCREMENT
	BPL	30$
	LDA	I,-1
30$:	ADC	Z,TEMP2+1		;CARRY OR BORROW INTO HIGH ADDRESS
	STA	Z,TEMP2+1
	INY
	JMP	10$
40$:	RTS
	.PAGE
;
;TEST TRACK SELECT BUTTON
;
TBONE:	CLC
	BIT	A,TSEL
	BPL	10$			;SWITCH IS ON!
	LDA	Z,THIST
	BNE	50$
	RTS				;SWITCH ISN'T ACTIVE
10$:	LDA	I,4
	LDY	Z,THIST			;FIRST TIME?
	STA	Z,THIST			;SET SWITCH COUNTER
	BEQ	UPTRK			;YES
	RTS
50$:	DEC	Z,THIST			;DO BOUNCE SWITCH
	RTS				;NOT DONE YET
UPTRK:
	LDY	Z,TRKN
	INY				;TRKN=TRKN+1
	CPY	I,QNOTRK
	BCC	10$			;NOT TOO BIG
	LDY	I,0
10$:	STY	Z,TRKN
UPAR	=40
DWNAR	=240
LEFTAR	=6
RIGHTAR	=2
;
;OUTPUT THE TRACK NUMBERED TRKN
;
TRACK:	LDY	I,41			;IF TRACK,ZERO,BLANK TOP OF SCREEN
10$:	LDA	I,DWNAR
	STA	AY,PF			;ZERO TOP LINE
	LDA	I,UPAR
	STA	AY,27.*32.+PF-2		;ZERO BOTTOM LINE
	DEY
	BPL	10$
15$:	LDA	I,QNOTRK
	JSR	17$			;OUTPUT TRACK ZERO, COMMON PART
	LDA	Z,TRKN			;NOW OUTPUT THIS TRACK
17$:
	ASL
	STA	Z,TEMP2			;TIMES TWO
	ASL				;TIMES FOUR
	CLC
	ADC	Z,TEMP2			;TIMES SIX
	TAY
	STX 	Z,TEMP5			;SAVE X REGISTER
	LDX	I,0
20$:	LDA	AY,TPTRS		;GET TRACK POINTERS
	STA	ZX,TEMP1		;STORE IN TEMP1,TEMP2,TEMP3
	INY
	INX
	CPX	I,6
	BNE	20$
	LDX	I,0
	LDY	I,0
40$:	CPY	I,0
	BNE	45$			;NOT AT THE END OF LINE
	LDA	I,LEFTAR
	JSR	PFOUT			;OUTPUT A LEFT ARROW
	LDA	I,RIGHTAR
	JSR	PFOUT			;OUPUT A RIGHT ARROW
	LDY	I,15.			;RESET COUNTER
45$:	LDA	NX,TEMP1		;GET A BYTE OF TRACK
	PHA
	LSR
	LSR				;GET HIGH NIBBLE
	LSR
	LSR
	JSR	PFOUT
	PLA
	JSR	PFOUT
	INC	Z,TEMP2			;INCR COUNT
	BNE	50$
	INC	Z,TEMP2+1		;CARRY
	BEQ	60$			;DONE
50$:	DEY
	STA	Z,TREST
	INC	Z,TEMP1
	BNE	40$		;LOOP
	
	INC	Z,TEMP1+1		;INCR HIGH 
	JMP	40$			;CONTINUE
60$:	LDX	Z,TEMP5			;GET THE X REGISTER
	LDA	I,0
	STA	Z,OLDCRED
	SEC				;FLAG THAT TRACK IS UP
	RTS
;
;	A	=CHAR TO BE CONVERTED AND STORED
;
PFOUT:
	AND	I,17
	LSR
	TAX				;INDEX INTO TABLE
	LDA	AX,CONTAB		;GET CHAR
	BIT	A,H2		;TEST IF A WALL
	BNE	5$
	ORA	I,0			;CHANGE TO 4 TO DISPLAY THE ARROWS
5$:	ADC	I,0			;ADD ONE IF THE CARRY IS SET
	LDX	I,0
	STA	NX,TEMP3		;PUT INTO P.F.
	INC	Z,TEMP3
	BNE	10$
	INC	Z,TEMP3+1			;CARRY
10$:	RTS
H2:	.BYTE	2
;
;CHECKPOINTS
;
SCORE:	LDA	ZX,STAT			;DRONES DON'T SCORE
	BPL	SCROUT
	LDA	Z,TRKN
	ASL
	ASL				;TIMES 4
	ASL				;TIMES 8
	ASL				;TIMES 16
	STA	Z,TEMP1
	LDA	ZX,SCORED		;GET THIS CARS SCORE
	ASL
	AND	I,34			;RESULT WILL BE 0-4*4
	CMP	I,4*4			;COMMON CHECK POINT?
	BNE	30$
	LDY	I,QCOMCH		;YES, SET POINTER TOIT
	LDA	I,5
	STA	Z,TEMP1			;SET LOOP COUNTER
	BNE	40$			;AND USE IT
30$:
	CLC
	ADC	Z,TEMP1			;OFFSET	TO CHECK POINTS
	TAY				;Y POINTS AT CHECKPOINTS
	LDA	I,4
	STA	Z,TEMP1			;LOOP COUNT
40$:	LDA	ZX,VPOST
	AND	I,360
	STA	Z,TEMP5
	LDA	ZX,HPOST
	LSR
	LSR
	LSR
	LSR
	AND	I,17
	ORA	Z,TEMP5
	STA	Z,TEMP5
S27:	LDA	AY,CHKPTS		;GET CORRECT CHECKPOINT
	CMP	Z,TEMP5			;CAR ON CHECKPOINT?
	BEQ	S26			;YES
	INY
	DEC	Z,TEMP1
	BNE	S27
	BEQ	SCROUT			;PUT UP THE SCORE
;
;SCORE
;
S26:	SED
	CLC
	LDA	I,2
	ADC	ZX,SCORED		;ADD 2 TO SCORE
	STA	ZX,SCORED
	LDA	I,0
	ADC	ZX,SCORED+1		;CARRY INTO HIGH BYTE
	STA	ZX,SCORED+1
	CLD
	LDY	Z,LEADER
	CMP	AY,SCORED+1
	BCC	40$			;NOT A LEADER
	BEQ	10$
	BCS	30$			;NEW LEADER
10$:	LDA	ZX,SCORED
	CMP	AY,SCORED		;TEST LOW SCORE
	BCC	40$			;NOT A LEADER
	BEQ	40$			;NOT A LEADER
30$:	STX	Z,LEADER		;SET A NEW LEADER
40$:
;
;PUT THE NEW SCORE ON THE SCREEN
;
SCROUT:
	LDY	AX,SCADD1		;GET CARS SCORE ADDR
	STY	Z,TEMP1
	LDY	AX,SCADD1+1
	STY	Z,TEMP1+1
20$:	LDY	I,0
	LDA	ZX,SOUND
	BPL	SCRPLAY
;
;PUT THE WORD TRAFFIC UP FOR DRONE SCORE
;
	CPX	I,3
	BCC	30$			;CAR 3 OR 4
	LDA	I,TRF1			;FIRST PART OF TRAFFIC
	JSR	ASC100			;TO SCREEN
	LDA	I,TRF2			;2ND CHAR
	JSR	ASC100
	LDA	I,TRF3			;3RD CHAR
	JMP	ASC100
30$:	LDA	I,TRF1+200
	JSR	ASC100
	LDA	I,TRF2+200
	JSR	ASC100
	LDA	I,TRF3+200
	JMP	ASC100
;
;	OUTPUT SCORE FOR PLAYERS
;
SCRPLAY:
;
;FLASH LEADERS SCORE
;
	CPX	Z,LEADER
	BNE	40$			;NOT THE LEADER
	LDA	I,30
	BIT	Z,FRAME
	BNE	40$			;PUT UP SCORE
	LDA	I,40			;40=ASCII BLANK CHAR
	JSR	ASC100			;BLANK 1ST DIGIT
	LDA	I,40
	JSR	ASC100			;BLANK 2ND
	LDA	I,40
	JMP	ASC100			;BLANK 3RD
40$:
	LDA	ZX,SCORED+1		;GET HIGH CHAR
	JSR	ASCSTR			;GO PUT IT ON THE FIELD
	LDA	ZX,SCORED
	LSR
	LSR
	LSR				;MIDDLE DIGIT
	LSR
	JSR	ASCSTR
	LDA	ZX,SCORED		;LOW DIGIT
;
;FORMAT ASCII FOR OUTPUT
;
ASCSTR:	AND	I,17
	ORA	I,60
	ORA	AX,ROTEN1
ASC100:
	STA	NY,TEMP1
	LDA	Z,TEMP1
	CLC
	ADC	AX,SCRIN1
	STA	Z,TEMP1
	LDA	AX,SCRIN1
	BPL	POS			;SCRIN1 POSITIVE?
NEG:	LDA	I,377			;NO SIGN EXTEND ONES
	BNE	CHRIS
POS:	LDA	I,0			;YES, SIGN EXTEND ZEROS
CHRIS:	ADC	Z,TEMP1+1
	STA	Z,TEMP1+1
	RTS
;
;OUTPUT ONE CAR TO THE SCREEN
;
TRAN1:	LDA	ZX,HPOST		;UPDATE CAR POSITIONS
	STA	ZX,HPOS
	LDA	ZX,VPOST
	STA	ZX,VPOS
	LDA	ZX,STAT
	BPL	20$
	LDA	ZX,SOUND		;IF A PLAYER, CLEAR DRONE BIT
	AND	I,17
	STA	ZX,SOUND
20$:	RTS
;
;OUTPUT ALL 4 CARS
;
TRANS:	LDX	I,6			;DO ALL THE CARS
10$:	JSR	TRAN1
	DEX
	DEX
	BPL	10$
	RTS
;
;OUTPUT THE COIN MESSAGE
;
COINOUT: LDX	I,COIN1			;GUESS 1 COIN PER PLAY
	 LDA	Z,OPTSW2
	LSR
	BCS	10$
	LDX	I,COIN2			;NO, 2 COINS PER PLAY
10$:	STX	Z,TEMP4+1
	LDY	I,1			;POINTER INCREMENT
	LDA	I,PRCOIN		;PF PTR.
	JSR	MESS			;OUTPUT THE COIN MESSAGE
	LDX	Z,TEMP4+1		;GET COIN POINTER
	LDY	I,-1			;POINTER INCREMENT
	LDA	I,PUCOIN		;PF PTR
	JMP	MESS			;OUTPUT UPSIDE DOWN MESSAGE
;
;OUTPUT COUNTDOWN MESSAGE
;
CNTMES:	LDY	I,1
	LDX	I,STARTM		;MESSAGE OFFSET
	LDA 	I,PRCNT			;PF POINTER
	JSR	MESS
	LDY	I,-1
	LDX	I,STARTM		;MESSAGE
	LDA	I,PUCNT			;PF POINTER
	JSR	MESS
	LDA	Z,CNTDWN
	ORA	I,60			;MAKE IT ASCII
	STA	A,16.*32.+5+PF
	ORA	I,200			;FLIP IT OVER
	STA	A,10.*32.+25.+PF
	RTS
;
;OUTPUT CREDIT MESSAGE
;
CREDOUT:
	LDA	Z,OLDCRED
	CMP	Z,CREDIT		;CHANGED?
	BNE	5$
	RTS				;NO CHANGE
5$:	LDA	Z,OPTSW3
	AND	I,3			;EXTRACT LANGUAGE NUMBER
	STA	Z,TEMP1
	TAY
	LDA	AY,CREDL		;PF ENCODED POINTER
	LDY	I,1
	LDX	I,CREDMES		;CREDIT MESSAGE
	JSR	MESS			;OUTPUT IT
	LDY	Z,TEMP1
	LDA	AY,CREDR		;PF ADDRESS
	LDY	I,-1
	LDX	I,CREDMES		;MESSAGE NUMBER
	JSR	MESS
	ASL	Z,TEMP1			;MESSAGE NO. TIMES 2
	LDY	Z,TEMP1
	LDA	AY,CREDNL
	STA	Z,TEMP1			;LEFT SCORE POINTER
	LDA	AY,CREDNL+1
	STA	Z,TEMP1+1
	LDA	AY,CREDNR
	STA	Z,TEMP2			;RIGHT SCORE POINTER
	LDA	AY,CREDNR+1
	STA	Z,TEMP2+1
	LDA	Z,CREDIT		;OVERWRITE CORRECT CREDIT
	STA	Z,OLDCRED
	LSR				;WHOLE CREDITS
	CMP	I,4			;OUTPUT 4 MAX CREDITS
	BCC	10$			;CREDITS < 4
	LDA	I,4			;CREDITS > 4, SET TO 4
10$:	ORA	I,60
	LDY	I,0
	STA	NY,TEMP1		;STORE INTO PF
	ORA	I,200			;FLIP IT
	STA	NY,TEMP2		;STORE INTO PF
	RTS
	.PAGE
	.SBTTL	TABLES AND MESSAGES
RATIO:	.BYTE	14,10,6,5			;GEAR RATIOS FOR RPM SOUNDS
TUP:	.BYTE	46,70,113,136
MAXVEL:	.BYTE	240,^H0D0,220,^H0C0,200,^H0B0,160,^H0A0
VPOSTAB	=MAXVEL+1
	.BYTE	0,0,0,0			;1ST 2K CHECKSUMS
;
;	VERTICAL AND HORIZONTAL SINE-COSINE TABLES
;
	.MACRO	VHTAB Q,R,S,T
	.BYTE	Q*2&255.,R*2&255.,S*2&255.,T*2&255.
	.ENDM
VOFF:
	VHTAB	-11.,-11.,-10.,-9.
	VHTAB	-8.,-6.,-4.,-2.
HOFF:
	VHTAB	0,2,4,6
	VHTAB	8.,9.,10.,11.
	VHTAB	11.,11.,10.,9.
	VHTAB	8.,6,4,2
	VHTAB	0,-2,-4,-6
	VHTAB	-8.,-9.,-10.,-11.
	VHTAB	-11.,-11.,-10.,-9.
	VHTAB	-8.,-6,-4,-2
	.MACRO	ATAB A,B,C,D
	.WORD	A*4096.+<B*256.&4095.+<C*16.+<D&15.>&255.>>
	.ENDM
;
;ACCELERATION TABLES
;
	.ENABL	M68
ACTAB:
	ATAB	7,1,1,1			;0-1
	ATAB	6,2,1,1			;2-3
	ATAB	4,3,1,1			;4-5
	ATAB	2,5,2,1			;6
	ATAB	0,4,2,1			;8
	ATAB	-1,3,2,1		;10
	ATAB	-2,2,3,1		;12
	ATAB	-3,1,4,1		;14
	ATAB	-3,0,4,1		;16
	ATAB	-4,-1,3,2		;18
	ATAB	-5,-2,1,2		;20
	ATAB	-5,-2,1,3		;22
	ATAB	-6,-2,0,3		;24
	ATAB	-7,-3,-1,2		;26
	ATAB	-7,-3,-2,2		;28
	ATAB	-7,-4,-3,1		;30
;
;DECELERATION TABLES
;
DACTAB:
	ATAB	0,0,0,0			;0-1
	ATAB	-2,-1,-1,-1		;2
	ATAB	-4,-1,-1,-1		;4
	ATAB	-6,-2,-1,-1		;6
	ATAB	-7,-2,-1,-1		;8
	ATAB	-7,-3,-2,-1		;10
	ATAB	-7,-3,-2,-1		;12
	ATAB	-7,-4,-2,-1		;14
	ATAB	-7,-4,-2,-1		;16
	ATAB	-7,-5,-3,-2		;18
	ATAB	-7,-5,-3,-2		;20
	ATAB	-7,-6,-4,-2		;22
	ATAB	-7,-6,-5,-2		;24
	ATAB	-7,-7,-5,-3		;26
	ATAB	-7,-7,-6,-4		;28
	ATAB	-7,-7,-6,-5		;30
	.DSABL	M68
	.RADIX	16
;TABLE FOR SPR2 TO SPR4 CODE CONVERSIONS
CONTAB:	.BYTE	20
	.BYTE	60
	.BYTE	0A0
	.BYTE	0E0
	.BYTE	22
	.BYTE	62
	.BYTE	0A2
	.BYTE	0E2
;
;TABLE OF PLAYFIELD ADDRESS FOR THE SCORE
;
SCADD1:	.WORD	8.+PF
	.WORD	25.+PF
	.WORD	27.*32.+23.+PF
	.WORD	27.*32.+6.+PF
	.RADIX	8
ROTEN1:	.BYTE	300
SCRIN1:	.BYTE	-1
	.BYTE	200
	.BYTE	-1
	.BYTE	100
	.BYTE	1
	.BYTE	0
	.BYTE	1

	.RADIX	8
PRRAM	=0
PRCNT	=2
PRCOIN	=4
PUCNT	=6
PUCOIN	=8.
PRGER	=10.
PRENG	=12.
PUGER	=14.
PUENG	=16.
;
;RIGHT SIDE UP MESSAGES
;
MPOINT: .WORD	13.*32.+9.+PF		;RAM OF
	.WORD	16.*32.+6+PF		;COUND DOWN
	.WORD	20.*32.+7+PF		;COIN PER PLAYER
;
;UP SIDE DOWN MESSAGES
;
	.WORD	10.*32.+24.+PF		;COUNT DOWN
	.WORD	6*32.+23.+PF		;COIN PER PLAYER

;
;RIGHT SIDE UP CREDIT MESSAGES
;
	.WORD	24.*32.+4+PF		;GERMAN
	.WORD	24.*32.+6+PF		;FRENCH,SPANISH,ENGLISH
;
;UPSIDE DOWN CREDIT MESSAGES
;
	.WORD	2.*32.+27.+PF		;GERMAN
	.WORD	2.*32.+25.+PF		;FRENCH,SPANISH,ENGLISH
;
;LANGUAGE INDEXES FOR PF ADDRESSES
;
CREDL:
	.BYTE	PRGER			;GERMAN
	.BYTE	PRENG			;FRENCH
	.BYTE	PRENG			;SPANISH
	.BYTE	PRENG			;ENGLISH
CREDR:
	.BYTE	PUGER			;GERMAN
	.BYTE	PUENG			;FRENCH
	.BYTE	PUENG			;SPANISH
	.BYTE	PUENG			;ENGLISH
;
;ADDRESS OF CREDIT, RIGHT SIDE UP
;
CREDNL:	.WORD	24.*32.+3.+PF		;GERMAN
	.WORD	24.*32.+18.+PF		;FRENCH
	.WORD	24.*32.+6.+PF		;SPANISH
	.WORD	24.*32.+17.+PF		;ENGLISH
;ADDRESS OF UPSIDE DOWN CREDIT
CREDNR:	.WORD	2*32.+28.+PF		;GERMAN
	.WORD	2*32.+13.+PF		;FRENCH
	.WORD	2*32.+25.+PF		;SPANISH
	.WORD	2*32.+14.+PF		;ENGLISH
MESSPT:
	.WORD	MES12			;GERMAN
	.WORD	MES13
	.WORD	MES14
	.WORD	MES4
	.WORD	MES15

	.WORD	MES9			;FRENCH
	.WORD	MES7
	.WORD	MES8
	.WORD	MES4
	.WORD	MES16

	.WORD	MES10			;SPANISH
	.WORD	MES5
	.WORD	MES6
	.WORD	MES4
	.WORD	MES17

	.WORD	MES0			;ENGLISH
	.WORD	MES2
	.WORD	MES3
	.WORD	MES4
	.WORD	MES11
MES0:	.ASCIZ	/ SECONDS UNTIL START/
MES2:	.ASCIZ	/1 COIN PER PLAYER/  
MES3:	.ASCIZ	/2 COINS PER PLAYER/  
MES4:	.ASCIZ	/RAM OK ROM OK/
MES5:	.ASCIZ	/1 MONEDA POR JUGADOR/
MES6:	.ASCIZ	/2 MONEDAS POR JUGADOR/
MES7:	.ASCIZ	/1 PIECE PAR JOUEUR/
MES8:	.ASCIZ	/2 PIECES PAR JOUEUR/
MES9:	.ASCIZ	/ SECONDES DEPART/
MES10:	.ASCIZ	/ SEGUNDOS DE ESPERA/
MES11:  .ASCIZ  /CREDIT FOR   PLAYERS/
MES12:	.ASCIZ	/ SEKUNDEN/
MES13:	.ASCIZ	/1 MUENZE PRO SPIELER/
MES14:	.ASCIZ	/2 MUENZE PRO SPIELER/
MES15:	.ASCIZ	/ SPIELER HABEN GUTSCHRIFT/
MES16:	.ASCIZ	/CREDIT POUR   JOUEURS/
MES17:	.ASCIZ	/  JUGADORES AVENTAJAN/
	.BYTE	^H82		;LAST 2K CHECKSUM
	.IIF	NE,.-MAINT&1 .BYTE 0
	.WORD	NMIINT,PWRON,PWRON
	.END
	.WORD	NMIINT,PWRON,PWRON
	.END
                                                                                                                                                                                       